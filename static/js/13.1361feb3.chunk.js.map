{"version":3,"sources":["components/SkillBar.jsx"],"names":["MotionBox","motion","Box","Color","hexCode","red","green","blue","codeInc","undefined","this","parseInt","substr","toString","toUpperCase","slice","start","mid","end","console","log","getHexCode","SkillBar","percent","children","control","useAnimation","useInView","ref","inView","useState","bgColor","setColor","title","setTitle","useEffect","cstart","cend","Math","exp","diffR","diffG","diffB","interpolateColor","alignItems","h","w","base","sm","md","borderRadius","bg","animate","transition","duration","ease","initial","position","top","left","fontSize","whiteSpace","variant"],"mappings":"sNAKMA,EAAYC,YAAOC,KAEnBC,E,WACF,cAA0C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,KAAO,oBACrC,IAAIC,OAAuBC,IAAZL,EACfM,KAAKL,IAAOG,EAAWG,SAASP,EAAQQ,OAAO,EAAE,GAAI,IAAMD,SAASN,GACpEK,KAAKJ,MAASE,EAAWG,SAASP,EAAQQ,OAAO,EAAE,GAAI,IAAMD,SAASL,GACtEI,KAAKH,KAAQC,EAAWG,SAASP,EAAQQ,OAAO,EAAE,GAAI,IAAMD,SAASJ,G,8CAGzE,WACI,MAAO,KACD,KAAKG,KAAKL,IAAIQ,SAAS,IAAIC,eAAeC,OAAO,IACjD,KAAKL,KAAKJ,MAAMO,SAAS,IAAIC,eAAeC,OAAO,IACnD,KAAKL,KAAKH,KAAKM,SAAS,IAAIC,eAAeC,OAAO,O,KAI1DC,EAAQ,IAAIb,EAAM,CAACC,QAAQ,YAC3Ba,EAAM,IAAId,EAAM,CAACC,QAAQ,YACzBc,EAAM,IAAIf,EAAM,CAACC,QAAQ,YAE/Be,QAAQC,IAAIJ,EAAMK,cAwEHC,UA9Cf,YAA0C,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACnBC,EAAUC,cADqB,EAEfC,cAFe,mBAE9BC,EAF8B,KAEzBC,EAFyB,OAITC,mBAAS,MAJA,mBAI9BC,EAJ8B,KAIrBC,EAJqB,OAKXF,mBAAS,MALE,mBAK9BG,EAL8B,KAKvBC,EALuB,KA0BrC,OAnBAC,qBAAU,WACFN,GACAJ,EAAQT,MAAM,CAAC,kBAAmB,MAEvC,CAACS,EAASI,IAEbM,qBAAU,WACNH,EAtCiB,SAACT,GAEtB,IAAIa,EAAQC,GADZd,EAAU,GAAG,GAAIe,KAAKC,KAAK,IAAIhB,EAAQ,SAE1B,GACTa,EAASpB,EACTqB,EAAOpB,IAGPmB,EAASnB,EACToB,EAAOnB,EACPK,GAAW,GAGf,IAAIiB,EAAQH,EAAKhC,IAAM+B,EAAO/B,IAC1BoC,EAAQJ,EAAK/B,MAAQ8B,EAAO9B,MAC5BoC,EAAQL,EAAK9B,KAAO6B,EAAO7B,KAM/B,OAJAiC,EAASA,EAAQjB,EAAWa,EAAO/B,IACnCoC,EAASA,EAAQlB,EAAWa,EAAO9B,MACnCoC,EAASA,EAAQnB,EAAWa,EAAO7B,KAE5B,IAAIJ,EAAM,CAACE,IAAImC,EAAOlC,MAAMmC,EAAOlC,KAAKmC,IAiBjCC,CAAiBpB,GAASF,cAEhCa,EADDX,GAAW,GACD,WACHA,GAAW,GACR,eACHA,GAAW,GACR,WAEA,eAEd,CAACA,IAGA,eAAC,IAAD,CAAMqB,WAAW,SAAjB,UACI,cAAC,IAAD,CAAKC,EAAE,OAAOC,EAAG,CAACC,KAAM,QAASC,GAAI,QAASC,GAAI,SAAUC,aAAa,KAAKC,GAAG,WAAjF,SACI,cAACnD,EAAD,CACI4B,IAAKA,EACLwB,QAAS3B,EACT4B,WAAY,CAAEC,SAAU,EAAGC,KAAM,WACjCC,QAAS,CAAC,kBAAmB,GAC7BX,EAAE,OACFC,EAAG,aAAavB,EAAQ,yBACxB2B,aAAa,KACbC,GAAIpB,EARR,SASI,eAAC,IAAD,CAAM0B,SAAS,WAAWC,IAAI,MAAMC,KAAK,OAAOC,SAAU,CAACb,KAAK,KAAME,GAAG,MAAOY,WAAW,SAASC,QAAQ,WAA5G,cAAyH7B,EAAzH,WAGPT","file":"static/js/13.1361feb3.chunk.js","sourcesContent":["import { Box, Text, Flex } from \"@chakra-ui/react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { motion, useAnimation } from \"framer-motion\";\r\n\r\nconst MotionBox = motion(Box);\r\n\r\nclass Color {\r\n    constructor({hexCode, red, green, blue}) {\r\n        var codeInc = (hexCode !== undefined);\r\n        this.red = (codeInc) ? parseInt(hexCode.substr(1,2), 16) : parseInt(red);\r\n        this.green = (codeInc) ? parseInt(hexCode.substr(3,2), 16) : parseInt(green);\r\n        this.blue = (codeInc) ? parseInt(hexCode.substr(5,2), 16) : parseInt(blue);\r\n    }\r\n\r\n    getHexCode() {\r\n        return \"#\"\r\n            +('00'+this.red.toString(16).toUpperCase()).slice(-2)\r\n            +('00'+this.green.toString(16).toUpperCase()).slice(-2)\r\n            +('00'+this.blue.toString(16).toUpperCase()).slice(-2);\r\n    }\r\n}\r\n\r\nconst start = new Color({hexCode:\"#12c2e9\"});\r\nconst mid = new Color({hexCode:\"#c471ed\"});\r\nconst end = new Color({hexCode:\"#f64f59\"});\r\n\r\nconsole.log(start.getHexCode())\r\n\r\nconst interpolateColor = (percent) => {\r\n    percent = 1/(0.5+Math.exp(-10*(percent-0.435)));\r\n    var cstart, cend;\r\n    if(percent < 1) {\r\n        cstart = start;\r\n        cend = mid;\r\n    }\r\n    else {\r\n        cstart = mid;\r\n        cend = end;\r\n        percent -= 1;\r\n    }\r\n\r\n    var diffR = cend.red - cstart.red;\r\n    var diffG = cend.green - cstart.green;\r\n    var diffB = cend.blue - cstart.blue;\r\n\r\n    diffR = (diffR * percent) + cstart.red;\r\n    diffG = (diffG * percent) + cstart.green;\r\n    diffB = (diffB * percent) + cstart.blue;\r\n\r\n    return new Color({red:diffR, green:diffG, blue:diffB});\r\n};\r\n\r\nfunction SkillBar({ percent, children }) {\r\n    const control = useAnimation();\r\n    const [ref, inView] = useInView();\r\n\r\n    const [bgColor, setColor] = useState(null);\r\n    const [title, setTitle] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (inView) {\r\n            control.start({\"--animate-width\": 1});\r\n        }\r\n    }, [control, inView]);\r\n\r\n    useEffect(() => {\r\n        setColor( interpolateColor(percent).getHexCode() );\r\n        if(percent <= 0.4) {\r\n            setTitle(\"Beginner\");\r\n        } else if(percent <= 0.6) {\r\n            setTitle(\"Intermediate\");\r\n        } else if(percent <= 0.8) {\r\n            setTitle(\"Advanced\");\r\n        } else {\r\n            setTitle(\"Perfected\");\r\n        }\r\n    }, [percent]);\r\n\r\n    return (\r\n        <Flex alignItems=\"center\">\r\n            <Box h=\"35px\" w={{base: \"250px\", sm: \"300px\", md: \"500px\"}} borderRadius=\"xl\" bg=\"gray.400\">\r\n                <MotionBox \r\n                    ref={ref}\r\n                    animate={control}\r\n                    transition={{ duration: 2, ease: \"easeOut\" }}\r\n                    initial={{\"--animate-width\": 0}}\r\n                    h=\"100%\" \r\n                    w={\"calc(100%*\"+percent+\"*var(--animate-width))\"} \r\n                    borderRadius=\"xl\" \r\n                    bg={bgColor}>\r\n                    <Text position=\"relative\" top=\"3px\" left=\"10px\" fontSize={{base:\"lg\", md:\"xl\"}} whiteSpace=\"nowrap\" variant=\"light-sm\"> {title} </Text>\r\n                </MotionBox>\r\n            </Box>\r\n            {children}\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default SkillBar;"],"sourceRoot":""}