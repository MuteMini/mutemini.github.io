{"version":3,"sources":["components/Background.jsx"],"names":["deg2rad","degrees","Math","PI","Particles","pointCount","graph","useCallback","a","b","t","tan","mesh","useRef","camera","useMemo","COLOR_TYPES","vec","THREE","transform","positions","Array","map","_","i","position","y","randFloatSpread","z","x","colors","floor","random","length","useFrame","state","centerX","window","innerWidth","centerY","innerHeight","current","rotation","mouse","needsUpdate","copy","clock","elapsedTime","setPosition","setMatrixAt","setColorAt","instanceMatrix","console","log","ref","args","makeDefault","Background","ballCount","onCreated","gl","setClearColor","setClearAlpha","colorManagement","intensity"],"mappings":"4KAKMA,EAAU,SAAAC,GAAO,OAAIA,GAAWC,KAAKC,GAAK,MAEhD,SAASC,EAAT,GAAoC,IAAfC,EAAc,EAAdA,WAGbC,EAAQC,uBAAY,SAACC,EAAGC,EAAGC,GAC/B,OAFQ,KAEDR,KAAKS,IAHJ,IAGa,SAAAH,EAAG,GAAH,SAAKC,EAAG,GAAEC,MAE9B,CALO,GACA,OAMJE,EAAOC,mBACPC,EAASD,mBATkB,EAUaE,mBAAQ,WACpD,IAAMC,EAAc,CAAC,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,UAmB3E,MAAO,CAAEC,IAjBG,IAAIC,UAiBFC,UAhBI,IAAID,UAgBGE,UAbP,YAAIC,MAAMhB,IAAaiB,KAAI,SAACC,EAAGC,GAC/C,IAAMC,EAAW,IAAIP,UAKrB,OAHAO,EAASC,EAAIR,YAAgBS,gBAAiB,KAC9CF,EAASG,EAAIV,YAAgBS,gBAAiB,KAC9CF,EAASI,EAAIvB,EAAMmB,EAASC,EAAGD,EAASG,EAAG,GACpCH,KAO2BK,OAJrB,YAAIT,MAAMhB,IAAaiB,KAAI,WACxC,OAAO,IAAIJ,QAAY,IAAIF,EAAYd,KAAK6B,MAAM7B,KAAK8B,SAAShB,EAAYiB,gBAI7E,CAAC5B,EAAYC,IArBRW,EAVyB,EAUzBA,IAAKE,EAVoB,EAUpBA,UAAWC,EAVS,EAUTA,UAAWU,EAVF,EAUEA,OA2CnC,OApBAI,aAAS,SAACC,GACR,IACIC,EAA8B,GAApBC,OAAOC,WACjBC,EAA+B,GAArBF,OAAOG,YAErB1B,EAAO2B,QAAQC,SAAShB,EAAI1B,GAASmC,EAAMQ,MAAMd,EAAEQ,OAAOC,WAAaF,GAAWA,EAJ3D,IAKvBtB,EAAO2B,QAAQC,SAASb,EAAI7B,GAASmC,EAAMQ,MAAMjB,EAAEW,OAAOG,YAAcD,GAAWA,EAL5D,IAMvBzB,EAAO2B,QAAQG,aAAc,EAE7B,IAAK,IAAIpB,EAAI,EAAGA,EAAInB,IAAcmB,EAChCP,EAAI4B,KAAKzB,EAAUI,IACnBP,EAAIY,EAAIvB,EAAMW,EAAIS,EAAGT,EAAIW,EAA2B,GAAxBO,EAAMW,MAAMC,aACxC5B,EAAU6B,YAAY/B,GACtBL,EAAK6B,QAAQQ,YAAYzB,EAAGL,GAC5BP,EAAK6B,QAAQS,WAAW1B,EAAGM,EAAON,IAEpCZ,EAAK6B,QAAQU,eAAeP,aAAc,EAC1CQ,QAAQC,IAAIvC,EAAO2B,QAAQhB,aAI3B,gCAAe6B,IAAK1C,EAAM2C,KAAM,CAAC,KAAM,KAAMlD,GAA7C,UACE,cAAC,IAAD,CAAmBmD,aAAW,EAACF,IAAKxC,EAAQW,SAAU,CAAC,EAAG,EAAG,IAAKiB,SAAU,CAAC,EAAG,EAAG1C,EAAQ,OAC3F,sCAAsBuD,KAAM,CAAC,MAC7B,wCAoBSE,UAff,YAAoC,IAAdC,EAAa,EAAbA,UACpB,OACE,eAAC,IAAD,CAAQC,UAAW,SAAAxB,GACjBA,EAAMyB,GAAGC,cAAe,IAAI3C,QAAY,WACxCiB,EAAMyB,GAAGE,cAAe,KAExBC,iBAAe,EAJjB,UAKE,8BAAcC,UAAW,KACzB,4BAAYA,UAAW,GAAKvC,SAAU,EAAE,GAAG,IAAI,OAC/C,4BAAYuC,UAAW,GAAKvC,SAAU,CAAC,KAAK,KAAK,OACjD,cAACrB,EAAD,CAAWC,WAAYqD","file":"static/js/11.93f1c421.chunk.js","sourcesContent":["import { PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport React, { useCallback, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst deg2rad = degrees => degrees * (Math.PI / 180);\r\n\r\nfunction Particles({ pointCount }) {\r\n  let fre = 0.4;\r\n  let amp = 1.75;\r\n  const graph = useCallback((a, b, t) => {\r\n    return Math.tan(fre*(a**2+b**2+t))*amp\r\n    //return amp*Math.sin(fre*a + t)*Math.cos(fre*b + t);\r\n  }, [fre, amp]);\r\n\r\n  const mesh = useRef();\r\n  const camera = useRef();\r\n  const { vec, transform, positions, colors } = useMemo(() => {\r\n    const COLOR_TYPES = [\"708C43\",\"6E823E\",\"6C7738\",\"6A6D33\",\"68622E\",\"665828\",\"644D23\"];\r\n    \r\n    const vec = new THREE.Vector3()\r\n    const transform = new THREE.Matrix4()\r\n\r\n    // Precompute randomized initial positions\r\n    const positions = [...Array(pointCount)].map((_, i) => {\r\n      const position = new THREE.Vector3()\r\n      // Place randomly in a grid\r\n      position.y = THREE.MathUtils.randFloatSpread( 100 );\r\n      position.z = THREE.MathUtils.randFloatSpread( 100 );\r\n      position.x = graph(position.y, position.z, 0);\r\n      return position\r\n    })\r\n\r\n    const colors = [...Array(pointCount)].map(() => {\r\n      return new THREE.Color(\"#\"+COLOR_TYPES[Math.floor(Math.random()*COLOR_TYPES.length)])\r\n    })\r\n\r\n    return { vec, transform, positions, colors }\r\n  }, [pointCount, graph])\r\n\r\n  useFrame((state) => {\r\n    const mouseTolerance = 0.4;\r\n    var centerX = window.innerWidth * 0.5;\r\n    var centerY = window.innerHeight * 0.5;\r\n\r\n    camera.current.rotation.y = deg2rad((state.mouse.x*window.innerWidth - centerX) / centerX * mouseTolerance)\r\n    camera.current.rotation.x = deg2rad((state.mouse.y*window.innerHeight - centerY) / centerY * mouseTolerance)\r\n    camera.current.needsUpdate = true\r\n\r\n    for (let i = 0; i < pointCount; ++i) {\r\n      vec.copy(positions[i])\r\n      vec.x = graph(vec.y, vec.z, state.clock.elapsedTime*0.5)\r\n      transform.setPosition(vec)\r\n      mesh.current.setMatrixAt(i, transform)\r\n      mesh.current.setColorAt(i, colors[i])\r\n    }\r\n    mesh.current.instanceMatrix.needsUpdate = true\r\n    console.log(camera.current.position); \r\n  })\r\n\r\n  return(\r\n    <instancedMesh ref={mesh} args={[null, null, pointCount]}>\r\n      <PerspectiveCamera makeDefault ref={camera} position={[0, 0, 70]} rotation={[0, 0, deg2rad(55)]} />\r\n      <sphereBufferGeometry args={[0.2]} />\r\n      <meshToonMaterial />\r\n    </instancedMesh>\r\n  );\r\n}\r\n\r\nfunction Background({ ballCount }) {\r\n  return (\r\n    <Canvas onCreated={state => {\r\n      state.gl.setClearColor( new THREE.Color(0xEAB48A) );\r\n      state.gl.setClearAlpha( 0.2 )\r\n      }}\r\n      colorManagement>\r\n      <ambientLight intensity={0.6} />\r\n      <pointLight intensity={0.4} position={[-70,100,100]} />\r\n      <pointLight intensity={0.3} position={[100,-100,-100]} />\r\n      <Particles pointCount={ballCount}/> \r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default Background;"],"sourceRoot":""}